name: üîê DevSecOps Security Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  security-scan:
    name: üõ°Ô∏è Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # SECRET SCANNING
      - name: üïµÔ∏è Secret Scanning with GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # SCA SCANNING
      - name: üì¶ Install Safety for SCA
        run: |
          pip install safety

      - name: üîç SCA - Software Composition Analysis
        run: |
          echo "üîç Running SCA Scanning..."
          safety check --file requirements.txt --output text > sca-results.txt || true
          cat sca-results.txt

      # SAST SCANNING
      - name: üõ°Ô∏è Install Bandit for SAST
        run: |
          pip install bandit

      - name: üîç SAST - Static Application Security Testing
        run: |
          echo "üõ°Ô∏è Running SAST Scanning..."
          bandit -r . -f json -o sast-results.json || true
          bandit -r . -ll > sast-summary.txt 2>&1 || true
          echo "SAST scan completed"

      # MISCONFIGURATION SCANNING
      - name: üîß Install Trivy for Misconfiguration Scanning
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy jq -y

      - name: üîß Misconfiguration Scanning
        run: |
          echo "üîß Running Misconfiguration Scanning..."
          trivy config . --format json --output misconfig-results.json --quiet
          trivy config . --format table > misconfig-summary.txt 2>&1
          echo "Misconfiguration scan completed"

      # SAVE REPORTS
      - name: üìÑ Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            results.json
            sca-results.txt
            sast-results.json
            sast-summary.txt
            misconfig-results.json
            misconfig-summary.txt

      # CHECK FOR CRITICAL VULNERABILITIES
      - name: üö® Check for Critical Issues
        run: |
          echo "Checking for critical vulnerabilities..."

          # Check GitLeaks results
          if [ -f "results.json" ] && [ -s "results.json" ]; then
            echo "‚ùå CRITICAL: Secrets detected!"
            echo "secrets=true" >> $GITHUB_ENV
          fi

          # Check SCA results
          if grep -q "vulnerabilities reported" sca-results.txt; then
            VULN_COUNT=$(grep -o "[0-9]\+ vulnerabilities reported" sca-results.txt | head -1 | grep -o "^[0-9]\+")
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "‚ùå CRITICAL: $VULN_COUNT vulnerabilities found in dependencies!"
              echo "vulnerabilities=true" >> $GITHUB_ENV
            fi
          fi

          # Check SAST results
          if [ -f "sast-summary.txt" ]; then
            HIGH_SAST=$(grep -c "Severity: High" sast-summary.txt || echo "0")
            if [ "$HIGH_SAST" -gt 0 ]; then
              echo "‚ùå CRITICAL: $HIGH_SAST high severity SAST issues found!"
              echo "sast_critical=true" >> $GITHUB_ENV
            fi
          fi

          # Check Misconfiguration results
          if [ -f "misconfig-results.json" ]; then
            CRITICAL_MISCONFIG=$(cat misconfig-results.json | jq -r '.Results[]?.Misconfigurations[]? | select(.Severity == "CRITICAL") | .Severity' 2>/dev/null | wc -l)
            HIGH_MISCONFIG=$(cat misconfig-results.json | jq -r '.Results[]?.Misconfigurations[]? | select(.Severity == "HIGH") | .Severity' 2>/dev/null | wc -l)
            TOTAL_CRITICAL_HIGH=$((CRITICAL_MISCONFIG + HIGH_MISCONFIG))
            
            if [ "$TOTAL_CRITICAL_HIGH" -gt 0 ]; then
              echo "‚ùå CRITICAL: $TOTAL_CRITICAL_HIGH critical/high misconfigurations found!"
              echo "misconfig_critical=true" >> $GITHUB_ENV
            fi
          fi

      # FAIL IF CRITICAL ISSUES FOUND
      - name: ‚ö†Ô∏è Fail Build on Critical Issues
        if: env.secrets == 'true' || env.vulnerabilities == 'true' || env.sast_critical == 'true' || env.misconfig_critical == 'true'
        run: |
          echo "üö® BUILD FAILED: Critical security issues detected!"
          echo "üîç Check the artifacts for detailed reports"
          exit 1
