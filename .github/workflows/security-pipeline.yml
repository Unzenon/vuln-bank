name: 🔐 DevSecOps Security Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  security-scan:
    name: 🛡️ Security Scanning
    runs-on: ubuntu-latest

    # Add PostgreSQL service for DAST
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: vulnbank
          POSTGRES_PASSWORD: password123
          POSTGRES_DB: vulnbank
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # SECRET SCANNING
      - name: 🕵️ Secret Scanning with GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # SCA SCANNING
      - name: 📦 Install Safety for SCA
        run: |
          pip install safety

      - name: 🔍 SCA - Software Composition Analysis
        run: |
          echo "🔍 Running SCA Scanning..."
          safety check --file requirements.txt --output text > sca-results.txt || true
          cat sca-results.txt

      # SAST SCANNING
      - name: 🛡️ Install Bandit for SAST
        run: |
          pip install bandit

      - name: 🔍 SAST - Static Application Security Testing
        run: |
          echo "🛡️ Running SAST Scanning..."
          bandit -r . -f json -o sast-results.json || true
          bandit -r . -ll > sast-summary.txt 2>&1 || true
          echo "SAST scan completed"

      # DAST SCANNING
      - name: 🚀 Start Application for DAST
        env:
          DATABASE_URL: postgresql://vulnbank:password123@localhost:5432/vulnbank
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: vulnbank
          POSTGRES_PASSWORD: password123
          POSTGRES_DB: vulnbank
        run: |
          echo "🚀 Starting Vuln Bank Application..."
          pip install -r requirements.txt

          # Start app in background
          python app.py &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV

          # Wait for app to start
          echo "⏳ Waiting for application to start..."
          for i in {1..30}; do
            if curl -s http://localhost:5000 > /dev/null 2>&1; then
              echo "✅ Application is running on port 5000"
              break
            fi
            echo "⏳ Waiting for app... ($i/30)"
            sleep 3
          done

          # Final check
          if ! curl -s http://localhost:5000 > /dev/null 2>&1; then
            echo "❌ Application failed to start"
            exit 1
          fi

      - name: 🌐 DAST - Dynamic Application Security Testing
        run: |
          echo "🌐 Running DAST Scanning with OWASP ZAP..."
          mkdir -p reports

          # Use correct OWASP ZAP image
          docker run --rm \
            --network host \
            -v ${{ github.workspace }}/reports:/zap/wrk/:rw \
            softwaresecurityproject/zap-stable:latest \
            zap-baseline.py \
            -t http://localhost:5000 \
            -J dast-results.json \
            -H dast-results.html \
            -r dast-results.xml \
            -I || echo "DAST completed with findings"

          # Move reports to root directory
          if [ -f "reports/dast-results.json" ]; then
            mv reports/dast-results.* . 2>/dev/null || echo "Reports moved"
          fi

          echo "DAST scan completed"

      - name: 🛑 Stop Application
        if: always()
        run: |
          if [ ! -z "$APP_PID" ]; then
            echo "🛑 Stopping application (PID: $APP_PID)"
            kill $APP_PID 2>/dev/null || true
            sleep 2
          fi

          # Kill any remaining python processes
          pkill -f "python app.py" || true

      # MISCONFIGURATION SCANNING
      - name: 🔧 Install Trivy for Misconfiguration Scanning
        run: |
          # Install Trivy using the new method
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy jq -y

      - name: 🔧 Misconfiguration Scanning
        run: |
          echo "🔧 Running Misconfiguration Scanning..."
          trivy config . --format json --output misconfig-results.json --quiet || true
          trivy config . --format table > misconfig-summary.txt 2>&1 || true
          echo "Misconfiguration scan completed"

      # SAVE REPORTS
      - name: 📄 Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            results.json
            sca-results.txt
            sast-results.json
            sast-summary.txt
            dast-results.json
            dast-results.html
            dast-results.xml
            misconfig-results.json
            misconfig-summary.txt

      # CHECK FOR CRITICAL VULNERABILITIES
      - name: 🚨 Check for Critical Issues
        run: |
          echo "🔍 Checking for critical vulnerabilities..."
          CRITICAL_FOUND=false

          # Check GitLeaks results
          if [ -f "results.json" ] && [ -s "results.json" ]; then
            echo "❌ CRITICAL: Secrets detected!"
            echo "secrets=true" >> $GITHUB_ENV
            CRITICAL_FOUND=true
          fi

          # Check SCA results
          if [ -f "sca-results.txt" ] && grep -q "vulnerabilities reported" sca-results.txt; then
            VULN_COUNT=$(grep -o "[0-9]\+ vulnerabilities reported" sca-results.txt | head -1 | grep -o "^[0-9]\+" || echo "0")
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "❌ CRITICAL: $VULN_COUNT vulnerabilities found in dependencies!"
              echo "vulnerabilities=true" >> $GITHUB_ENV
              CRITICAL_FOUND=true
            fi
          fi

          # Check SAST results
          if [ -f "sast-summary.txt" ]; then
            HIGH_SAST=$(grep -c "Severity: High" sast-summary.txt 2>/dev/null || echo "0")
            if [ "$HIGH_SAST" -gt 0 ]; then
              echo "❌ CRITICAL: $HIGH_SAST high severity SAST issues found!"
              echo "sast_critical=true" >> $GITHUB_ENV
              CRITICAL_FOUND=true
            fi
          fi

          # Check DAST results
          if [ -f "dast-results.json" ]; then
            # Check for high and critical risk codes
            DAST_HIGH=$(grep -c '"riskcode": "3"' dast-results.json 2>/dev/null || echo "0")
            DAST_CRITICAL=$(grep -c '"riskcode": "4"' dast-results.json 2>/dev/null || echo "0")
            TOTAL_DAST_CRITICAL=$((DAST_HIGH + DAST_CRITICAL))
            
            if [ "$TOTAL_DAST_CRITICAL" -gt 0 ]; then
              echo "❌ CRITICAL: $TOTAL_DAST_CRITICAL critical/high DAST issues found!"
              echo "dast_critical=true" >> $GITHUB_ENV
              CRITICAL_FOUND=true
            fi
          fi

          # Check Misconfiguration results
          if [ -f "misconfig-results.json" ]; then
            CRITICAL_MISCONFIG=$(jq -r '[.Results[]?.Misconfigurations[]? | select(.Severity == "CRITICAL")] | length' misconfig-results.json 2>/dev/null || echo "0")
            HIGH_MISCONFIG=$(jq -r '[.Results[]?.Misconfigurations[]? | select(.Severity == "HIGH")] | length' misconfig-results.json 2>/dev/null || echo "0")
            TOTAL_CRITICAL_HIGH=$((CRITICAL_MISCONFIG + HIGH_MISCONFIG))
            
            if [ "$TOTAL_CRITICAL_HIGH" -gt 0 ]; then
              echo "❌ CRITICAL: $TOTAL_CRITICAL_HIGH critical/high misconfigurations found!"
              echo "misconfig_critical=true" >> $GITHUB_ENV
              CRITICAL_FOUND=true
            fi
          fi

          # Set overall critical status
          if [ "$CRITICAL_FOUND" = true ]; then
            echo "critical_issues_found=true" >> $GITHUB_ENV
          else
            echo "✅ No critical security issues found!"
          fi

      # NOTIFICATION STEP (will be enhanced in next phase)
      - name: 🔔 Security Alert Notification
        if: env.critical_issues_found == 'true'
        run: |
          echo "🚨 SECURITY ALERT: Critical vulnerabilities detected!"
          echo "This is where we'll send notifications to Slack/Discord/Email"
          echo "📊 Issues found:"
          [ "${{ env.secrets }}" = "true" ] && echo "  - 🕵️ Secrets detected in code"
          [ "${{ env.vulnerabilities }}" = "true" ] && echo "  - 📦 Vulnerable dependencies found"
          [ "${{ env.sast_critical }}" = "true" ] && echo "  - 🛡️ Critical SAST issues found"
          [ "${{ env.dast_critical }}" = "true" ] && echo "  - 🌐 Critical DAST issues found"
          [ "${{ env.misconfig_critical }}" = "true" ] && echo "  - 🔧 Critical misconfigurations found"

      # FAIL BUILD ON CRITICAL ISSUES
      - name: ⚠️ Fail Build on Critical Issues
        if: env.critical_issues_found == 'true'
        run: |
          echo "🚨 BUILD FAILED: Critical security issues detected!"
          echo "🔍 Check the artifacts for detailed reports"
          echo "📋 Action required: Fix critical issues before deployment"
          exit 1

      # SUCCESS MESSAGE
      - name: ✅ Security Scan Completed Successfully
        if: env.critical_issues_found != 'true'
        run: |
          echo "🎉 All security scans completed successfully!"
          echo "✅ No critical security issues found"
          echo "📊 All scanned areas passed:"
          echo "  - 🕵️ Secret Scanning: ✅ Clean"
          echo "  - 📦 SCA (Dependencies): ✅ Safe"
          echo "  - 🛡️ SAST (Code Analysis): ✅ Secure"
          echo "  - 🌐 DAST (Runtime Testing): ✅ Protected"
          echo "  - 🔧 Misconfiguration: ✅ Configured"
          echo ""
          echo "🚀 Ready for deployment!"
