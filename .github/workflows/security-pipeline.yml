name: 🔐 DevSecOps Security Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  security-scan:
    name: 🛡️ Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # SECRET SCANNING
      - name: 🕵️ Secret Scanning with GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # SCA SCANNING
      - name: 📦 Install Safety for SCA
        run: |
          pip install safety

      - name: 🔍 SCA - Software Composition Analysis
        run: |
          echo "🔍 Running SCA Scanning..."
          safety check --file requirements.txt --output text > sca-results.txt || true
          cat sca-results.txt

      # SAST SCANNING
      - name: 🛡️ Install Bandit for SAST
        run: |
          pip install bandit

      - name: 🔍 SAST - Static Application Security Testing
        run: |
          echo "🛡️ Running SAST Scanning..."
          bandit -r . -f json -o sast-results.json || true
          bandit -r . -ll > sast-summary.txt 2>&1 || true
          echo "SAST scan completed"

      # DAST SCANNING
      - name: 🐳 Setup Docker for Application
        uses: docker/setup-buildx-action@v3

      - name: 🚀 Start Application with Docker Compose
        run: |
          echo "🚀 Starting Vuln Bank with Docker Compose..."

          # Check if docker-compose.yml exists
          if [ -f "docker-compose.yml" ]; then
            echo "📄 Found docker-compose.yml"
          else
            echo "❌ No docker-compose.yml found"
            exit 1
          fi

          # Start services with docker compose (new syntax)
          docker compose up -d --build

          # Wait for services to be ready
          echo "⏳ Waiting for services to start..."
          sleep 45

          # Check running containers
          docker compose ps

          # Check logs
          echo "📋 Application logs:"
          docker compose logs web | head -20

          # Test if app is running
          for i in {1..20}; do
            if curl -f http://localhost:5000 >/dev/null 2>&1; then
              echo "✅ Application is running on port 5000"
              echo "📄 Homepage preview:"
              curl -s http://localhost:5000 | head -10
              break
            fi
            echo "⏳ Waiting for app... ($i/20)"
            sleep 5
          done

          # Show detailed logs if app is not responding
          if ! curl -f http://localhost:5000 >/dev/null 2>&1; then
            echo "❌ Application not responding, showing detailed logs:"
            echo "=== WEB CONTAINER LOGS ==="
            docker compose logs web
            echo "=== DB CONTAINER LOGS ==="
            docker compose logs db
            echo "=== CONTAINER STATUS ==="
            docker compose ps
            exit 1
          fi

      - name: 🌐 DAST - Dynamic Application Security Testing
        run: |
          echo "🌐 Running DAST Scanning with OWASP ZAP..."
          mkdir -p reports

          # Fix permissions for ZAP
          chmod 777 reports

          # Run OWASP ZAP baseline scan with correct image name
          docker run --rm \
            --network host \
            -v ${{ github.workspace }}/reports:/zap/wrk:rw \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t http://localhost:5000 \
            -g gen.conf \
            -J dast-results.json \
            -H dast-results.html \
            -r dast-results.xml \
            -I > dast-output.log 2>&1 || echo "DAST completed with findings"

          # Show ZAP output for debugging
          echo "=== ZAP Scan Output ==="
          cat dast-output.log || echo "No log file found"

          # Parse results from the log output
          echo "=== Parsing DAST Results ==="
          if [ -f "dast-output.log" ] && grep -q "WARN-NEW\|FAIL-NEW" dast-output.log; then
            echo "📊 DAST Issues Found:"
            grep "WARN-NEW\|FAIL-NEW" dast-output.log | head -10
            
            # Count critical/high issues
            FAIL_COUNT=$(grep -c "FAIL-NEW:" dast-output.log || echo "0")
            WARN_COUNT=$(grep -c "WARN-NEW:" dast-output.log || echo "0")
            
            echo "🚨 FAIL Issues: $FAIL_COUNT"
            echo "⚠️ WARN Issues: $WARN_COUNT"
            
            # Create simple JSON report from log
            echo "{
              \"summary\": {
                \"fail_issues\": $FAIL_COUNT,
                \"warn_issues\": $WARN_COUNT,
                \"total_issues\": $((FAIL_COUNT + WARN_COUNT))
              },
              \"scan_status\": \"completed\",
              \"target\": \"http://localhost:5000\"
            }" > dast-results.json
            
            # Create simple HTML report
            echo "<html><body>
            <h2>DAST Scan Results</h2>
            <p>Target: http://localhost:5000</p>
            <p>Critical/High Issues: $FAIL_COUNT</p>
            <p>Medium Issues: $WARN_COUNT</p>
            <pre>$(grep 'WARN-NEW\|FAIL-NEW' dast-output.log)</pre>
            </body></html>" > dast-results.html
            
            # Show sample of issues found
            echo "📋 Sample Issues Found:"
            grep "WARN-NEW\|FAIL-NEW" dast-output.log | head -5
          else
            echo "✅ No major issues found or scan failed"
            echo '{"summary": {"fail_issues": 0, "warn_issues": 0}, "scan_status": "completed"}' > dast-results.json
            echo "<html><body><h2>DAST Scan Results</h2><p>No critical issues found</p></body></html>" > dast-results.html
          fi

          echo "DAST scan completed"

      - name: 🛑 Stop Application
        if: always()
        run: |
          echo "🛑 Stopping Docker Compose services..."
          docker compose down || true
          docker compose down --volumes || true

          # Clean up any remaining containers
          docker container prune -f || true

      # MISCONFIGURATION SCANNING
      - name: 🔧 Install Trivy for Misconfiguration Scanning
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy jq -y

      - name: 🔧 Misconfiguration Scanning
        run: |
          echo "🔧 Running Misconfiguration Scanning..."
          trivy config . --format json --output misconfig-results.json --quiet
          trivy config . --format table > misconfig-summary.txt 2>&1
          echo "Misconfiguration scan completed"

      # SAVE REPORTS
      - name: 📄 Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            results.json
            sca-results.txt
            sast-results.json
            sast-summary.txt
            dast-results.json
            dast-results.html
            dast-output.log
            misconfig-results.json
            misconfig-summary.txt

      # CHECK FOR CRITICAL VULNERABILITIES
      - name: 🚨 Check for Critical Issues
        run: |
          echo "Checking for critical vulnerabilities..."
          CRITICAL_FOUND=false

          # Check GitLeaks results
          if [ -f "results.json" ] && [ -s "results.json" ]; then
            echo "❌ CRITICAL: Secrets detected!"
            echo "secrets=true" >> $GITHUB_ENV
            CRITICAL_FOUND=true
          fi

          # Check SCA results
          if grep -q "vulnerabilities reported" sca-results.txt; then
            VULN_COUNT=$(grep -o "[0-9]\+ vulnerabilities reported" sca-results.txt | head -1 | grep -o "^[0-9]\+")
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "❌ CRITICAL: $VULN_COUNT vulnerabilities found in dependencies!"
              echo "vulnerabilities=true" >> $GITHUB_ENV
              CRITICAL_FOUND=true
            fi
          fi

          # Check SAST results
          if [ -f "sast-summary.txt" ]; then
            HIGH_SAST=$(grep -c "Severity: High" sast-summary.txt || echo "0")
            if [ "$HIGH_SAST" -gt 0 ]; then
              echo "❌ CRITICAL: $HIGH_SAST high severity SAST issues found!"
              echo "sast_critical=true" >> $GITHUB_ENV
              CRITICAL_FOUND=true
            fi
          fi

          # Check DAST results
          if [ -f "dast-results.json" ]; then
            # Parse JSON for critical issues
            DAST_FAIL=$(jq -r '.summary.fail_issues // 0' dast-results.json 2>/dev/null || echo "0")
            DAST_WARN=$(jq -r '.summary.warn_issues // 0' dast-results.json 2>/dev/null || echo "0")
            
            # Consider FAIL as critical, ignore WARN for critical check
            if [ "$DAST_FAIL" -gt 0 ]; then
              echo "❌ CRITICAL: $DAST_FAIL critical DAST issues found!"
              echo "dast_critical=true" >> $GITHUB_ENV
              CRITICAL_FOUND=true
            fi
            
            if [ "$DAST_WARN" -gt 0 ]; then
              echo "⚠️ INFO: $DAST_WARN warning DAST issues found (not blocking)"
            fi
          fi

          # Check Misconfiguration results
          if [ -f "misconfig-results.json" ]; then
            CRITICAL_MISCONFIG=$(cat misconfig-results.json | jq -r '.Results[]?.Misconfigurations[]? | select(.Severity == "CRITICAL") | .Severity' 2>/dev/null | wc -l)
            HIGH_MISCONFIG=$(cat misconfig-results.json | jq -r '.Results[]?.Misconfigurations[]? | select(.Severity == "HIGH") | .Severity' 2>/dev/null | wc -l)
            TOTAL_CRITICAL_HIGH=$((CRITICAL_MISCONFIG + HIGH_MISCONFIG))
            
            if [ "$TOTAL_CRITICAL_HIGH" -gt 0 ]; then
              echo "❌ CRITICAL: $TOTAL_CRITICAL_HIGH critical/high misconfigurations found!"
              echo "misconfig_critical=true" >> $GITHUB_ENV
              CRITICAL_FOUND=true
            fi
          fi

          # Set overall critical status
          if [ "$CRITICAL_FOUND" = true ]; then
            echo "critical_issues_found=true" >> $GITHUB_ENV
          else
            echo "✅ No critical security issues found!"
          fi

      # FAIL IF CRITICAL ISSUES FOUND
      - name: ⚠️ Fail Build on Critical Issues
        if: env.secrets == 'true' || env.vulnerabilities == 'true' || env.sast_critical == 'true' || env.dast_critical == 'true' || env.misconfig_critical == 'true'
        run: |
          echo "🚨 BUILD FAILED: Critical security issues detected!"
          echo "🔍 Check the artifacts for detailed reports"
          echo "📊 Summary of issues found:"
          [ "${{ env.secrets }}" = "true" ] && echo "  - 🕵️ Secrets detected"
          [ "${{ env.vulnerabilities }}" = "true" ] && echo "  - 📦 Vulnerable dependencies"
          [ "${{ env.sast_critical }}" = "true" ] && echo "  - 🛡️ Critical SAST issues"
          [ "${{ env.dast_critical }}" = "true" ] && echo "  - 🌐 Critical DAST issues"
          [ "${{ env.misconfig_critical }}" = "true" ] && echo "  - 🔧 Critical misconfigurations"
          exit 1

      # SUCCESS MESSAGE
      - name: ✅ Security Scan Completed Successfully
        if: env.critical_issues_found != 'true'
        run: |
          echo "🎉 All security scans completed successfully!"
          echo "✅ No critical security issues found"
          echo "📊 All scanned areas:"
          echo "  - 🕵️ Secret Scanning: ✅"
          echo "  - 📦 SCA (Dependencies): ✅"
          echo "  - 🛡️ SAST (Code Analysis): ✅"
          echo "  - 🌐 DAST (Runtime Testing): ✅"
          echo "  - 🔧 Misconfiguration: ✅"
